{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","doSubmit","bind","assertThisInitialized","state","data","value","_this2","request","get","query","q","end","err","res","loadedJSON","console","log","body","setState","e","target","_this3","_this4","items","react_default","a","createElement","className","name","onChange","doChange","type","onClick","volumeInfo","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fe96b8c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport request from 'superagent'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.doSubmit = this.doSubmit.bind(this)\n    this.state = {\n      data: null,\n      value: null\n    }\n  }\n\n  componentWillMount () {\n    request.get('https://www.googleapis.com/books/v1/volumes')\n      .query({ 'q': this.state.value })\n      .end((err, res) => { this.loadedJSON(err, res) })\n  }\n  loadedJSON (err, res) {\n    if (err) {\n      console.log('err')\n    }\n    console.log('daet', res.body)\n    this.setState({ data: res.body\n    })\n  }\n  doChange (e) {\n    console.log(this.state.value)\n    this.setState({ value: e.target.value })\n  }\n  doSubmit (e) {\n    console.log(this.state.value)\n    request.get('https://www.googleapis.com/books/v1/volumes')\n      .query({ 'q': this.state.value })\n      .end((err, res) => { this.loadedJSON(err, res) })\n  }\n\n  render () {\n    if (!this.state.data) {\n      return <div className='App'>,,,,</div>\n    }\n    if (!this.state.data.items) {\n      return <div className='App'><form><input type='text' name='value' onChange={e => this.doChange(e)} value={this.state.value} /><input type='button' onClick={this.doSubmit} value='送信' /></form></div>\n    }\n    // JSON.stringify(this.state.data)\n    // for (var i = 0;i < 10; i++) {\n    // <input typle='value' name='value' ref={ (i) => {this.value = i}} value={this.state.value} onChange={e => this.doChange(e)} />\n    return (\n      <div className='App'>\n        <form>\n          <input name='value' onChange={e => this.doChange(e)} value={this.state.value} /><input type='button' onClick={this.doSubmit} value='送信' />\n          <br />\n        </form>\n        {this.state.data.items[0].volumeInfo.title}<br />\n        {this.state.data.items[1].volumeInfo.title}<br />\n        {this.state.data.items[2].volumeInfo.title}<br />\n        {this.state.data.items[3].volumeInfo.title}<br />\n        {this.state.data.items[4].volumeInfo.title}<br />\n        {this.state.data.items[5].volumeInfo.title}<br />\n        {this.state.data.items[6].volumeInfo.title}<br />\n        {this.state.data.items[7].volumeInfo.title}<br />\n        {this.state.data.items[8].volumeInfo.title}<br />\n        {this.state.data.items[9].volumeInfo.title}<br />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}